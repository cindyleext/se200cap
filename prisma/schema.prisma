datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Policy {
  id                Int            @id @default(autoincrement())
  insurancePolicyId String         @unique
  policyName        String
  basePrice         Decimal        @db.Decimal(10, 2)

  HolderPolicy      HolderPolicy[]
  PolicyPolicyType       PolicyPolicyType[]
}

model PolicyPolicyType {
  policyId        Int
  policyTypeName  String

  Policy Policy @relation(fields: [policyId], references: [id]) // Relation to Policy

  @@id([policyId, policyTypeName]) // Composite primary key
}

model Holder {
  id           Int            @id @default(autoincrement())
  email        String
  firstName    String
  lastName     String
  nric         String         @unique
  HolderPolicy HolderPolicy[]
}

model HolderPolicy {
  holderId Int
  policyId Int

  holder Holder @relation(fields: [holderId], references: [id]) // Relation to Holder
  policy Policy @relation(fields: [policyId], references: [id]) // Relation to Policy

  @@id([holderId, policyId]) // Composite primary key
}
